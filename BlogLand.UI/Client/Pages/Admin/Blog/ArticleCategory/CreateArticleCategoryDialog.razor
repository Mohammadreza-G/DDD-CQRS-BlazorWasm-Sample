@using Microsoft.AspNetCore.Http
@using System.Text
@using _0_Framework.Application
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Create Article Category
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            @if (Result != null && Result.IsFailed)
            {
                @foreach (var error in Result.Errors)
                {
                    <MudItem md="12">
                        <MudText Color="Color.Error" dir="rtl">@error</MudText>
                    </MudItem>
                }
            }
            <MudItem md="12">
                <MudTextField @bind-Value="ArticleCategory.Title" Label="Title" />
            </MudItem>
            <MudItem md="12">

                <InputFile OnChange="@OnInputFileChanged"></InputFile>

            </MudItem>
            <MudItem md="6">
                <MudTextField @bind-Value="ArticleCategory.PictureAlt" Label="Picture Alt" />
            </MudItem>
            <MudItem md="6">
                <MudTextField @bind-Value="ArticleCategory.PictureTitle" Label="Picture Title" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="Submit">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public CreateArticleCategory ArticleCategory = new CreateArticleCategory();
    public Dtat.Result.Result? Result = new Result();
    private StreamContent fileContent;
    private Stream fileStream;
    private string fileName;
    private string imageType;

    public async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            long maxFileSize = 1024 * 1024 * 10;
            
            fileStream = e.File.OpenReadStream();
            fileContent = new StreamContent(e.File.OpenReadStream(maxFileSize));
            
            fileName = e.File.Name;
            var fileSize = new byte[e.File.Size];
            var test = await e.File.OpenReadStream().ReadAsync(fileSize);
            
            imageType = e.File.ContentType;

            this.StateHasChanged();
        }
    }

    public async Task Create()
    {
        using var content = new MultipartFormDataContent();
        if (fileName != null)
        {
            content.Add(content: fileContent, name: "Picture", fileName: fileName);
        }
        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            ((ArticleCategory.PictureAlt != null ? ArticleCategory.PictureAlt : string.Empty)))), "PictureAlt");

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            ((ArticleCategory.PictureTitle != null ? ArticleCategory.PictureTitle : string.Empty)))), "PictureTitle");

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            (ArticleCategory.Title != null ? ArticleCategory.Title : string.Empty))), "Title");

        var slug = ArticleCategory.Title.Slugify();

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            ((slug != null ? slug : string.Empty)))), "Slug");

        var response = await Http.PostAsync("blogApi/ArticleCategories/Create", content);
        var json = await response.Content.ReadAsStringAsync();
        Result = JsonConvert.DeserializeObject<Result>(json);
    }

    async Task Submit()
    {
        await Create();
        if (Result != null && Result.IsSuccess)
        {
            Snackbar.Add("Article Category Added", Severity.Success);
            MudDialog.Close();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}
