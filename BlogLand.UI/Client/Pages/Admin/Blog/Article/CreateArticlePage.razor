@layout AdminLayout
@page "/Admin/Articles/Create"
@using System.Text
@using _0_Framework.Application
@using BlogManagement.Domain.Aggregates.ArticleCategories;
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = Roles.Admin)]


<MudText Typo="Typo.h6">
    <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
    Create Article
</MudText>
<MudGrid>
    @if (Result != null && Result.IsFailed)
    {
        @foreach (var error in Result.Errors)
        {
            <MudItem md="12">
                <MudText Color="Color.Error" dir="rtl">@error</MudText>
            </MudItem>
        }
    }
    <MudItem md="6">
        <MudTextField @bind-Value="Article.Title" Label="Title" />
    </MudItem>
    <MudItem md="6">
        <MudSelect T="ArticleCategoryViewModel" @bind-Value="ArticleCategoryViewModel" Label="Role" AnchorOrigin="Origin.BottomCenter">
                @foreach (var category in Categories.Value)
                {
                    <MudSelectItem Value="category">@category.Title</MudSelectItem>
                }
        </MudSelect>
    </MudItem>
    <MudItem md="12">
        <InputFile OnChange="@OnInputFileChanged"></InputFile>
    </MudItem>
    <MudItem md="6">
        <MudTextField @bind-Value="Article.PictureAlt" Label="Picture Alt" />
    </MudItem>
    <MudItem md="6">
        <MudTextField @bind-Value="Article.PictureTitle" Label="Picture Title" />
    </MudItem>
    <MudItem md="12">
        <MudTextField @bind-Value="Article.ShortDescription" Label="Title" />
    </MudItem>
</MudGrid>
<MudButton Link="/Admin/Articles">Cancel</MudButton>
<MudButton Color="Color.Error" OnClick="Submit">Create</MudButton>

@code {
    public CreateArticle Article = new CreateArticle();
    public Dtat.Result.Result<List<ArticleCategoryViewModel>> Categories = new Result<List<ArticleCategoryViewModel>>();
    public Dtat.Result.Result? Result = new Result();
    private StreamContent fileContent;
    private Stream fileStream;
    private string fileName;
    private string imageType;
    public ArticleCategoryViewModel ArticleCategoryViewModel = new ArticleCategoryViewModel(); 
    protected override async Task OnInitializedAsync()
    {
        await GetArticleCategories();
    }

    public async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            long maxFileSize = 1024 * 1024 * 10;

            fileStream = e.File.OpenReadStream();
            fileContent = new StreamContent(e.File.OpenReadStream(maxFileSize));

            fileName = e.File.Name;
            var fileSize = new byte[e.File.Size];
            var test = await e.File.OpenReadStream().ReadAsync(fileSize);

            imageType = e.File.ContentType;

            this.StateHasChanged();
        }
    }

    async Task GetArticleCategories()
    {
        Categories = await Http.GetFromJsonAsync<Result<List<ArticleCategoryViewModel>>>("blogApi/ArticleCategoriesQuery/GetAll");
    }

    public async Task Create()
    {
        using var content = new MultipartFormDataContent();
        if (fileName != null)
        {
            content.Add(content: fileContent, name: "Picture", fileName: fileName);
        }
        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            ((Article.PictureAlt != null ? Article.PictureAlt : string.Empty)))), "PictureAlt");

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            ((Article.PictureTitle != null ? Article.PictureTitle : string.Empty)))), "PictureTitle");

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            (Article.Title != null ? Article.Title : string.Empty))), "Title");

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            (Article.ShortDescription != null ? Article.ShortDescription : string.Empty))), "ShortDescription");

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            (Article.Description != null ? Article.Description : string.Empty))), "Description");

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject
            ((Article.ArticleCategory != null ? Article.ArticleCategory : string.Empty))))), "ArticleCategory");

        var slug = Article.Title.Slugify();

        content.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes
            ((slug != null ? slug : string.Empty)))), "Slug");

        var response = await Http.PostAsync("blogApi/Articles/Create", content);
        var json = await response.Content.ReadAsStringAsync();
        Result = JsonConvert.DeserializeObject<Result>(json);
    }

    async Task Submit()
    {
        await Create();
        if (Result != null && Result.IsSuccess)
        {
            Snackbar.Add("Article Added", Severity.Success);
            NavigationManager.NavigateTo("/Admin/Articles");
        }
    }
}
