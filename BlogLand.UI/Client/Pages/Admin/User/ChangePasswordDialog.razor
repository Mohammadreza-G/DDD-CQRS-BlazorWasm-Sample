@using Newtonsoft.Json
@using _0_Framework.Infrastructure
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Change Password
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            @if (Result != null && Result.IsFailed)
            {
                @foreach (var error in Result.Errors)
                {
                    <MudItem md="12">
                        <MudText Color="Color.Error" dir="rtl">@error</MudText>
                    </MudItem>
                }
            }
            <MudItem md="6">
                <MudTextField @bind-Value="Password.NewPassword" Label="New Password" />
            </MudItem>
            <MudItem md="6">
                <MudTextField @bind-Value="Password.RepeatNewPassword" Label="Repeat New Password" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="Submit">Edit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public long Id { get; set; }
    public ChangePassword Password = new ChangePassword();
    public Dtat.Result.Result? Result = new Result();

    public async Task ChangeRole()
    {
        var requestUri = "userApi/Users/ChangePassword";
        Password.Id = Id;
        var response = await Http.PutAsJsonAsync(requestUri, Password);
        var json = await response.Content.ReadAsStringAsync();
        Result = JsonConvert.DeserializeObject<Result>(json);
    }

    public async Task Submit()
    {
        await ChangeRole();
        if (Result != null && Result.IsSuccess)
        {
            Snackbar.Add("Password Changed", Severity.Success);
            MudDialog.Close();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}